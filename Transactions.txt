-- Oracle SQL Transaction Management Tasks

-- Task 1: Product Inventory Transaction with Savepoint
CREATE TABLE product_inventory (
    product_id NUMBER PRIMARY KEY,
    product_name VARCHAR2(100),
    stock NUMBER,
    price NUMBER(10,2)
);

-- Begin Transaction
BEGIN
    -- Insert initial product records
    INSERT INTO product_inventory (product_id, product_name, stock, price)
    VALUES (1, 'Laptop', 50, 1200.00);
    
    INSERT INTO product_inventory (product_id, product_name, stock, price)
    VALUES (2, 'Smartphone', 100, 800.00);
    
    INSERT INTO product_inventory (product_id, product_name, stock, price)
    VALUES (3, 'Tablet', 75, 500.00);
    
    -- Reduce stock of one product
    UPDATE product_inventory 
    SET stock = stock - 10 
    WHERE product_id = 1;
    
    -- Create a savepoint
    SAVEPOINT stock_update;
    
    -- Note: Transaction is not committed
END;
/

-- Task 2: Employee Salary Transaction with Savepoint
-- Assuming employee table already exists
BEGIN
    -- Insert a new employee
    INSERT INTO employee (employee_id, name, salary)
    VALUES (1001, 'John Doe', 50000);
    
    -- Increase salary by 10%
    UPDATE employee
    SET salary = salary * 1.1
    WHERE employee_id = 1001;
    
    -- Create a savepoint after first salary increase
    SAVEPOINT salary_increase;
    
    -- Further increase salary by 5%
    UPDATE employee
    SET salary = salary * 1.05
    WHERE employee_id = 1001;
    
    -- Rollback to the savepoint
    ROLLBACK TO salary_increase;
END;
/

-- Task 3: Customer and Order Transaction
BEGIN
    -- Declare variables to store new customer and order IDs
    DECLARE
        v_customer_id NUMBER;
        v_order_id NUMBER;
    BEGIN
        -- Insert new customer
        INSERT INTO customer (customer_id, name, email)
        VALUES (1001, 'Alice Smith', 'alice.smith@email.com')
        RETURNING customer_id INTO v_customer_id;
        
        -- Insert order for the new customer
        INSERT INTO orders (order_id, customer_id, order_date)
        VALUES (2001, v_customer_id, SYSDATE);
        
        -- If both inserts are successful, commit the transaction
        COMMIT;
    EXCEPTION
        -- If any error occurs, rollback the entire transaction
        WHEN OTHERS THEN
            ROLLBACK;
            RAISE;
    END;
END;
/

-- Task 4: AUTOCOMMIT Mode
-- Enable AUTOCOMMIT
SET AUTOCOMMIT ON;

-- Insert a row into sales table (will be automatically committed)
INSERT INTO sales (sales_id, customer_id, amount)
VALUES (501, 1001, 1250.50);

-- Disable AUTOCOMMIT
SET AUTOCOMMIT OFF;

-- Task 5: Multiple Savepoints in Transaction
BEGIN
    -- Assuming transactions table exists with columns like 
    -- transaction_id, account_id, amount, transaction_type
    
    -- Start with initial balance
    INSERT INTO transactions (transaction_id, account_id, amount, transaction_type)
    VALUES (1, 100, 1000, 'INITIAL');
    
    -- First debit
    INSERT INTO transactions (transaction_id, account_id, amount, transaction_type)
    VALUES (2, 100, -200, 'DEBIT');
    
    -- Create first savepoint
    SAVEPOINT first_debit;
    
    -- Second credit
    INSERT INTO transactions (transaction_id, account_id, amount, transaction_type)
    VALUES (3, 100, 500, 'CREDIT');
    
    -- Create second savepoint
    SAVEPOINT second_credit;
    
    -- Third debit
    INSERT INTO transactions (transaction_id, account_id, amount, transaction_type)
    VALUES (4, 100, -150, 'DEBIT');
    
    -- Create third savepoint
    SAVEPOINT third_debit;
    
    -- Rollback to a specific savepoint (e.g., first_debit)
    ROLLBACK TO first_debit;
END;
/

-- Notes:
-- 1. These scripts assume pre-existing tables for some operations
-- 2. You may need to adjust table and column names to match your specific schema
-- 3. Error handling and exact implementations may vary based on specific requirements









-- Oracle Transaction Example Demonstrating Transaction Control

-- Create a sample table for the transaction demonstration
CREATE TABLE bank_accounts (
    account_id NUMBER PRIMARY KEY,
    account_holder VARCHAR2(100),
    balance NUMBER(10,2)
);

-- Insert initial data
INSERT INTO bank_accounts VALUES (1, 'John Doe', 1000.00);
INSERT INTO bank_accounts VALUES (2, 'Jane Smith', 2000.00);

-- Transaction Demonstration Procedure
DECLARE
    v_transfer_amount NUMBER := 500.00;
    v_error_occurred BOOLEAN := FALSE;
BEGIN
    -- Start of the transaction
    BEGIN TRANSACTION;
    
    -- Perform multiple operations within the transaction
    
    -- Transfer money from John's account to Jane's account
    UPDATE bank_accounts 
    SET balance = balance - v_transfer_amount 
    WHERE account_id = 1;
    
    -- Create a savepoint before the second update
    SAVEPOINT before_second_update;
    
    UPDATE bank_accounts 
    SET balance = balance + v_transfer_amount 
    WHERE account_id = 2;
    
    -- Simulate a potential error condition
    IF v_transfer_amount > 1000 THEN
        v_error_occurred := TRUE;
        -- Rollback to the savepoint if the transfer amount is too large
        ROLLBACK TO SAVEPOINT before_second_update;
    END IF;
    
    -- If no error occurred, commit the transaction
    IF NOT v_error_occurred THEN
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Transaction successfully completed.');
    ELSE
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Transaction rolled back due to error.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- If any unexpected error occurs, roll back the entire transaction
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('An error occurred: ' || SQLERRM);
END;
/

-- Verify the final state of accounts
SELECT * FROM bank_accounts;

-- Additional Example: Demonstrating Explicit Rollback
DECLARE
    v_initial_balance NUMBER;
BEGIN
    -- Start a transaction
    BEGIN TRANSACTION;
    
    -- Store the initial balance of account 1
    SELECT balance INTO v_initial_balance 
    FROM bank_accounts 
    WHERE account_id = 1;
    
    -- Attempt to update the balance
    UPDATE bank_accounts 
    SET balance = balance + 1000 
    WHERE account_id = 1;
    
    -- Simulate a condition that requires rollback
    IF v_initial_balance > 1500 THEN
        -- Rollback the changes
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Transaction rolled back. No changes committed.');
    ELSE
        -- Commit the changes
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Transaction committed successfully.');
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        -- Handle any unexpected errors
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

-- Clean up (optional)
-- DROP TABLE bank_accounts;

-- Notes:
-- 1. BEGIN TRANSACTION starts a new transaction
-- 2. SAVEPOINT creates a point to which you can roll back
-- 3. ROLLBACK TO SAVEPOINT rolls back to a specific savepoint
-- 4. COMMIT saves the changes permanently
-- 5. ROLLBACK without a savepoint undoes all changes in the current transaction