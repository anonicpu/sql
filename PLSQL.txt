-- Comprehensive PL/SQL Solutions for Given Tasks

-- 1. Bonus Calculation PL/SQL Block
CREATE OR REPLACE PROCEDURE calculate_bonus(p_empno IN NUMBER) IS
    v_salary NUMBER;
    v_bonus NUMBER;
BEGIN
    -- Retrieve salary for the given employee number
    SELECT salary INTO v_salary 
    FROM employees 
    WHERE employee_id = p_empno;

    -- Calculate bonus based on salary conditions
    IF v_salary IS NULL THEN
        v_bonus := 0;
    ELSIF v_salary < 1000 THEN
        v_bonus := v_salary * 0.10;
    ELSIF v_salary BETWEEN 1000 AND 1500 THEN
        v_bonus := v_salary * 0.15;
    ELSE
        v_bonus := v_salary * 0.20;
    END IF;

    -- Print bonus amount
    DBMS_OUTPUT.PUT_LINE('Employee ' || p_empno || ' Bonus: ' || v_bonus);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Employee not found');
END;
/

-- 2. Update Salary with Commission
CREATE OR REPLACE PROCEDURE update_salary_with_commission(p_empno IN NUMBER) IS
    v_commission NUMBER;
    v_salary NUMBER;
BEGIN
    -- Retrieve commission for the given employee
    SELECT commission_pct, salary INTO v_commission, v_salary
    FROM employees
    WHERE employee_id = p_empno;

    -- Update salary if commission is null
    IF v_commission IS NULL THEN
        UPDATE employees
        SET salary = salary + NVL(v_commission, 0)
        WHERE employee_id = p_empno;
        
        DBMS_OUTPUT.PUT_LINE('Salary updated for Employee ' || p_empno);
    END IF;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Employee not found');
END;
/

-- 3. Get Department Name for Department 30
CREATE OR REPLACE PROCEDURE get_dept30_name IS
    v_deptname VARCHAR2(50);
BEGIN
    SELECT department_name INTO v_deptname
    FROM departments
    WHERE department_id = 30;
    
    DBMS_OUTPUT.PUT_LINE('Department 30 Name: ' || v_deptname);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Department 30 not found');
END;
/

-- 4. Find Job Nature for Department 20
CREATE OR REPLACE PROCEDURE get_dept20_job_nature IS
    v_job VARCHAR2(50);
BEGIN
    SELECT DISTINCT job_title INTO v_job
    FROM employees e
    JOIN jobs j ON e.job_id = j.job_id
    WHERE e.department_id = 20;
    
    DBMS_OUTPUT.PUT_LINE('Job Nature in Department 20: ' || v_job);
EXCEPTION
    WHEN TOO_MANY_ROWS THEN
        DBMS_OUTPUT.PUT_LINE('Multiple job natures found in Department 20');
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No job found in Department 20');
END;
/

-- 5. Find Salary for Department 20
CREATE OR REPLACE PROCEDURE get_dept20_salary IS
    v_salary NUMBER;
BEGIN
    SELECT salary INTO v_salary
    FROM employees
    WHERE department_id = 20 AND ROWNUM = 1;
    
    DBMS_OUTPUT.PUT_LINE('Salary in Department 20: ' || v_salary);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No employees in Department 20');
END;
/

-- 6. Update Salary with 10% Increase
CREATE OR REPLACE PROCEDURE increase_employee_salary(p_empno IN NUMBER) IS
BEGIN
    UPDATE employees
    SET salary = salary * 1.10
    WHERE employee_id = p_empno;
    
    DBMS_OUTPUT.PUT_LINE('Salary increased for Employee ' || p_empno);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Employee not found');
END;
/

-- 7. Add Rs. 1000 for Employees with Salary > 5000 in Specific Department
CREATE OR REPLACE PROCEDURE add_salary_to_dept(p_deptno IN NUMBER) IS
BEGIN
    UPDATE employees
    SET salary = salary + 1000
    WHERE salary > 5000 AND department_id = p_deptno;
    
    DBMS_OUTPUT.PUT_LINE('Salary added for employees in Department ' || p_deptno);
END;
/

-- 8a. View for Designation and Employee Count
CREATE OR REPLACE VIEW designation_employee_count AS
SELECT job_title, COUNT(*) as employee_count
FROM employees e
JOIN jobs j ON e.job_id = j.job_id
GROUP BY job_title;

-- 8b. View of Employees Except King
CREATE OR REPLACE VIEW employees_except_king AS
SELECT e.employee_id, e.first_name || ' ' || e.last_name AS emp_name, 
       e.department_id, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id
WHERE LOWER(e.first_name || ' ' || e.last_name) != 'king';

-- 8c. View of Employee Details
CREATE OR REPLACE VIEW employee_details AS
SELECT e.employee_id, e.first_name || ' ' || e.last_name AS emp_name, 
       e.department_id, d.department_name
FROM employees e
JOIN departments d ON e.department_id = d.department_id;

-- 9. Add Two Inputs
CREATE OR REPLACE PROCEDURE add_two_numbers(
    p_num1 IN NUMBER, 
    p_num2 IN NUMBER
) IS
    v_sum NUMBER;
BEGIN
    v_sum := p_num1 + p_num2;
    DBMS_OUTPUT.PUT_LINE('Sum: ' || v_sum);
END;
/

-- 10. Sum of Numbers Between Boundaries
CREATE OR REPLACE PROCEDURE sum_between_boundaries(
    p_lower IN NUMBER, 
    p_upper IN NUMBER
) IS
    v_sum NUMBER := 0;
BEGIN
    FOR i IN p_lower..p_upper LOOP
        v_sum := v_sum + i;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Sum between ' || p_lower || ' and ' || p_upper || ': ' || v_sum);
END;
/

-- 11. Retrieve Employee Details by Employee Number
CREATE OR REPLACE PROCEDURE get_employee_details(p_empno IN NUMBER) IS
    v_emp_name VARCHAR2(100);
    v_hiredate DATE;
    v_dept_name VARCHAR2(50);
BEGIN
    SELECT 
        first_name || ' ' || last_name,
        hire_date,
        department_name
    INTO 
        v_emp_name, 
        v_hiredate, 
        v_dept_name
    FROM employees e
    JOIN departments d ON e.department_id = d.department_id
    WHERE e.employee_id = p_empno;
    
    DBMS_OUTPUT.PUT_LINE('Employee Name: ' || v_emp_name);
    DBMS_OUTPUT.PUT_LINE('Hire Date: ' || v_hiredate);
    DBMS_OUTPUT.PUT_LINE('Department: ' || v_dept_name);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('Employee not found');
END;
/

-- 12. Check if Number is Palindrome
CREATE OR REPLACE PROCEDURE check_palindrome(p_number IN NUMBER) IS
    v_original VARCHAR2(100) := TO_CHAR(p_number);
    v_reversed VARCHAR2(100);
BEGIN
    v_reversed := REVERSE(v_original);
    
    IF v_original = v_reversed THEN
        DBMS_OUTPUT.PUT_LINE(p_number || ' is a palindrome');
    ELSE
        DBMS_OUTPUT.PUT_LINE(p_number || ' is not a palindrome');
    END IF;
END;
/

-- 13. Insert Employee and Department Details
CREATE OR REPLACE PROCEDURE insert_employee_details(
    p_first_name IN VARCHAR2,
    p_last_name IN VARCHAR2,
    p_email IN VARCHAR2,
    p_phone_number IN VARCHAR2,
    p_hire_date IN DATE,
    p_job_id IN VARCHAR2,
    p_salary IN NUMBER,
    p_commission_pct IN NUMBER,
    p_manager_id IN NUMBER,
    p_department_name IN VARCHAR2,
    p_location_id IN NUMBER
) IS
    v_department_id NUMBER;
BEGIN
    -- First, insert into departments
    INSERT INTO departments(department_name, location_id)
    VALUES (p_department_name, p_location_id)
    RETURNING department_id INTO v_department_id;

    -- Then, insert into employees
    INSERT INTO employees(
        first_name, last_name, email, phone_number, hire_date, 
        job_id, salary, commission_pct, manager_id, department_id
    ) VALUES (
        p_first_name, p_last_name, p_email, p_phone_number, p_hire_date,
        p_job_id, p_salary, p_commission_pct, p_manager_id, v_department_id
    );

    COMMIT;
    DBMS_OUTPUT.PUT_LINE('Employee and Department inserted successfully');
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Error inserting employee: ' || SQLERRM);
END;
/

-- 14. Find First Employee Over $2500 Higher in Command Than Employee 90
CREATE OR REPLACE PROCEDURE find_higher_employee IS
    v_current_empno NUMBER := 90;
    v_found_empno NUMBER;
BEGIN
    LOOP
        SELECT employee_id INTO v_found_empno
        FROM employees
        WHERE employee_id > v_current_empno 
          AND salary > 2500
          AND ROWNUM = 1;
        
        EXIT WHEN v_found_empno IS NOT NULL;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('First employee over $2500 higher in command: ' || v_found_empno);
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No employee found');
END;
/

-- 15. Sum of First 100 Numbers
CREATE OR REPLACE PROCEDURE sum_first_100_numbers IS
    v_sum NUMBER := 0;
BEGIN
    FOR i IN 1..100 LOOP
        v_sum := v_sum + i;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Sum of first 100 numbers: ' || v_sum);
END;
/

-- Example of how to execute these procedures
BEGIN
    -- Uncomment and modify as needed to test individual procedures
    -- calculate_bonus(100);
    -- update_salary_with_commission(100);
    -- get_dept30_name();
    -- get_dept20_job_nature();
    -- get_dept20_salary();
    -- increase_employee_salary(100);
    -- add_salary_to_dept(10);
    -- add_two_numbers(5, 7);
    -- sum_between_boundaries(1, 10);
    -- get_employee_details(100);
    -- check_palindrome(12321);
    -- insert_employee_details(...);
    -- find_higher_employee();
    -- sum_first_100_numbers();
END;
/